Ниже даю обзор (на русском языке) структуры и основных механизмов React / TypeScript‑версии проекта KyaMovVM, чтобы вы быстро сориентировались в кодовой базе.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 1. Общая структура репозитория

    .
    ├── public/                 # Статические файлы (favicon, изображения, svg‑диаграммы)
    ├── src/
    │   ├── components/         # Переиспользуемые React‑компоненты
    │   │   ├── ui/             # Компоненты из shadcn/ui
    │   │   ├── figma/          # Специальные компоненты для Figma‑макетов
    │   │   ├── CarDemo.tsx     # 3D‑демонстрация автомобиля (CSS 3D‑трансформации)
    │   │   ├── PlanPage.tsx    # Страница «План разработки»
    │   │   ├── DocumentationPage.tsx  # Страница «Документация»
    │   │   ├── ManualTestsPage.tsx     # Страница ручных тестов
    │   │   └── VersionIndicator.tsx    # Отображение текущей версии
    │   ├── styles/             # Tailwind‑конфигурация и глобальные стили
    │   │   └── globals.css
    │   ├── App.tsx             # Точка входа приложения, роутинг и навигация
    │   ├── main.tsx            # Привязка React к DOM
    │   └── vite.config.ts      # Настройки сборщика (Vite)
    ├── package.json            # Скрипты, зависимости
    └── tsconfig.json           # Конфигурация TypeScript

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 2. Точка входа и маршрутизация

### src/main.tsx

Простой «бустрап» React‑приложения, монтирует <App /> в #root.

### src/App.tsx

В этом файле описан клиентский роутинг (без React Router — на простом switch/case по внутреннему состоянию) и навигационное меню.

    // navigationLinks — список ссылок для меню
    const navigationLinks = [ 'home', 'plan', 'docs', 'manual_tests' /*…*/ ];

    // renderCurrentPage() — переключает содержимое под текущий route
    function renderCurrentPage(route: string) {
      switch (route) {
        case 'home': return <HomePage />;
        case 'plan': return <PlanPage />;
        // …
      }
    }

[src/App.tsx](C:\Site Prototype Recreation\src\App.tsx)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

## 3. Основные страницы и компоненты

### 3.1 Главная страница (HomePage)

    * Отображает 3D‑модель автомобиля с помощью CSS 3D‑трансформаций.
    * Анимированное сердце (либо другой эффект) как «фишка» на главной.

    import CarDemo from './components/CarDemo';
    // …
    <CarDemo />

[src/components/CarDemo.tsx](C:\Site Prototype Recreation\src\components\CarDemo.tsx)

### 3.2 План разработки (PlanPage)

Компонент с поэтапным (13 шагов) планом работ — список с чекбоксами либо просто инфографика.

[src/components/PlanPage.tsx](C:\Site Prototype Recreation\src\components\PlanPage.tsx)

### 3.3 Документация (DocumentationPage)

    * Вкладки (tabs) для разных разделов документации.
    * Поиск и навигация по разделам.

[src/components/DocumentationPage.tsx](C:\Site Prototype Recreation\src\components\DocumentationPage.tsx)

### 3.4 Руководство по ручным тестам (ManualTestsPage)

Интерактивные чек‑листы, разбитые по разделам приложения.

[src/components/ManualTestsPage.tsx](C:\Site Prototype Recreation\src\components\ManualTestsPage.tsx)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

## 4. UI‑библиотека и стили

### src/components/ui/

Сюда вынесены обёртки над shadcn/ui‑компонентами (Button, Input, Modal и т.д.), чтобы унифицировать стилизацию по проекту.

[src/components/ui/Button.tsx](C:\Site Prototype Recreation\src\components\ui\Button.tsx)

### Tailwind CSS

Глобальные утилиты конфигурируются в src/styles/globals.css. Проект использует utility‑first подход (v4) для скоростной стилизации.

[src/styles/globals.css](C:\Site Prototype Recreation\src\styles\globals.css)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

## 5. Система версий

### VersionIndicator.tsx

Постоянная индикация текущей версии (константа CURRENT_VERSION) и по клику — открытие VersionHistoryPage с историей изменений.

[src/components/VersionIndicator.tsx](C:\Site Prototype Recreation\src\components\VersionIndicator.tsx)

### VersionHistoryPage.tsx

Массив записей versions с категориями (features, bugfixes, improvements, breaking, security).

[src/components/VersionHistoryPage.tsx](C:\Site Prototype Recreation\src\components\VersionHistoryPage.tsx)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 

## 6. Принципы архитектуры

┌───────────────┬────────────────────────────────────┐
│ Аспект        │ Решение                            │
├───────────────┼────────────────────────────────────┤
│ Компоненты    │ Функциональные + React Hooks       │
├───────────────┼────────────────────────────────────┤
│ Состояние     │ Локальный via useState, useReducer │
│ Типизация     │ Строгий TypeScript                 │
├───────────────┼────────────────────────────────────┤
│ Стилизация    │ Tailwind CSS + shadcn/ui           │
├───────────────┼────────────────────────────────────┤
│ Анимации      │ CSS 3D трансформации (без WebGL)   │
├───────────────┼────────────────────────────────────┤
│ Маршрутизация │ Встроенная на switch/case          │
├───────────────┼────────────────────────────────────┤
│ Документация  │ Markdown‑/JSX‑страницы на русском  │
└───────────────┴────────────────────────────────────┘

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 7. Как запустить и проверить

    npm install           # установить зависимости
    npm run dev           # локальный сервер (Vite)
    npm run build         # собрать статику для продакшена
    npm run test          # запустить тесты (если есть)
    npm run lint          # проверка кода (ESLint, Prettier, TypeScript)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

## 8. Основные сценарии работы

    1. Добавление страницы
        2. Создаёте компонент в src/components/…
        3. Добавляете ссылку в navigationLinks и case в renderCurrentPage()
        4. Обновляете переводы/тексты в одном месте (объект texts в App.tsx)
    5. Стилизация
        6. Использовать готовые shadcn/ui
        7. Новые утилиты Tailwind прописывать в globals.css, по возможности переиспользовать
    8. Версии и релизы
        9. Инкрементировать CURRENT_VERSION в VersionIndicator.tsx
        10. Добавлять запись в versions в VersionHistoryPage.tsx

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

### Итог

Проект представляет собой SPA на React + TypeScript с простым роутингом, утилитарными стилями Tailwind v4 и 3D‑анимациями через CSS. Компонентная архитектура + строгая типизация делают кодовоую базу легко расширяемой и
поддерживаемой. Вся документация и тестовые чек‑листы реализованы как отдельные страницы, что упрощает ручное и автоматизированное тестирование.